@using WSDTChat.Services
@using System.Text.Json;
@using Microsoft.AspNetCore.SignalR.Client
@using WSDTChat.Hubs.HubEvent
@using WSDTChat.Domain
@using WSDT.EmojiFilePicker
@using Markdig;

@inject NavigationManager NavigationManager
@inject WSDTChat.Services.IChatService ChatService

<style>
    .resizedImg {
        height: 200px;
        background-color: #ccc;
        border-style: solid;
        border-width: 1px;
        border-color: #ccc;
        /* border-radius */
        -webkit-border-radius: 5px;
        -moz-border-radius: 5px;
        border-radius: 5px;
        /* box-shadow */
        -webkit-box-shadow: rgba(0,0,0,0.8) 0px 0 3px;
        -moz-box-shadow: rgba(0,0,0,0.8) 0 0 3px;
        box-shadow: rgba(0,0,0,0.8) 0 0 3px;
        cursor: pointer;

        transition: opacity 1s;
    }
    .resizedImg:hover {
        opacity: 0.5;
    }
</style>


<div class="card" style="margin:15px;">
    <div class="card-header">
        <h5>Live-Chat</h5>
        <h6 class="card-subtitle mb-2 text-muted">
            <AuthorizeView>
                <Authorized>You are logged in</Authorized>
                <NotAuthorized>Log in to access all features</NotAuthorized>
            </AuthorizeView>
        </h6>
    </div>

    <ul id="messagesList" class="list-group list-group-flush">
        @foreach (var UserMessage in ChatService.AllMessages)
        {
            <li class="list-group-item" style="@(UserMessage.User.Equals(ChatSystemMsg.SystemUser) ? "color: #ccc;font-style:italic;font-weight:bold;" : "")">
                <strong>@UserMessage.User.EMail</strong> <sup>@UserMessage.GetTimeDifference()</sup>
                @if (UserMessage.User.IsGuest)
                {
                    <span class="badge badge-pill badge-dark">Guest</span>
                }
                <div style="font-size:small;">
                    @foreach (var Submsg in UserMessage.Messages)
                    {
                        <div class="animated lightSpeedIn">@((MarkupString)Markdown.ToHtml(Submsg))</div>
                    }
                </div>
            </li>
        }
    </ul>
    <div class="card-body">
        <EditForm Model="@ChatService.ChatForm" Context="formContext" OnValidSubmit="ChatService.Send">
            <DataAnnotationsValidator />
            <AuthorizeView>
                <NotAuthorized>
                    <div class="input-group mb-3 @(ChatService.HasSentMsg ? "animated fadeOut":"")">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="addon-mail">&#x00040;</span>
                        </div>
                        <input type="text" class="form-control" placeholder="E-Mail" aria-label="E-Mail" aria-describedby="addon-inputmail" @bind-value="ChatService.ChatForm.CurrentUser.EMail" />
                    </div>
                    <ValidationMessage For="@(() => ChatService.ChatForm.CurrentUser.EMail)" />
                </NotAuthorized>
            </AuthorizeView>

            <small style="font-style:italic;font-weight: bold;">Markdown and Html are supported :-)</small>
            <EmojiInput IsSubmitDisabled="@(!ChatService.IsConnected())" Placeholder="Message.." ShowSubmit="true" CustomSymbols="@CustomSymbols"
                        @bind-Message="ChatService.ChatForm.MessageInput" AddFiles="AddFiles" FileUploadRoute="@(ICommonRoutes.FILE_UPLOAD)" />
            <ValidationMessage For="@(() => ChatService.ChatForm.MessageInput)" />
        </EditForm>


    </div>
    <div class="card-footer text-muted">
    </div>
</div>


@code {
    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private List<string> CustomSymbols = new List<string>()
    {
        "⺀", "⽥", "⽨", "⽣", "㣕"
    };

    private void AddToMsg(string msg) => ChatService.ChatForm.MessageInput += msg;

    public void AddFiles(List<string> imgUris)
    {
        foreach (string imgUri in imgUris) AddToMsg($"<img src='{imgUri}' alt='Image' class='resizedImg' />");

        ChatService.Send();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        ChatService.HubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(ICommonRoutes.CHAT_HUB))
            .Build();


        ChatService.HubConnection.On<string, MsgPriority>(IPublic.SYSTEM_MSG, (message, priority) =>
        {
            var lastMessage = ChatService.AllMessages.LastOrDefault();
            if (lastMessage != null && lastMessage.User.Equals(ChatSystemMsg.SystemUser))
            {
                lastMessage.Messages.Add(message);
            }
            else
            {
                ChatService.AllMessages.Add(new ChatSystemMsg(new List<string> { message }, priority));
            }
        });

        ChatService.HubConnection.On<string, string>(IPublic.RECEIVE_MSG, (user, message) =>
        {
            var chatUser = JsonSerializer.Deserialize<ChatUser>(user);
            var lastMessage = ChatService.AllMessages.LastOrDefault();
            if (lastMessage != null && lastMessage.User.Equals(chatUser))
            {
                // If last message has been written by the same user, add it to the last chatMsg-obj
                lastMessage.Messages.Add(message);
            }
            else
            {
                // other user typed msg
                ChatService.AllMessages.Add(
                            new ChatMsg(chatUser, new List<string> { message })
                        );
            }

            StateHasChanged();
        });

        await ChatService.HubConnection.StartAsync();
        await SetUsernameIfLoggedIn();
        await ChatService.Join(); // notify other chat members about new chatter
    }

    public async Task SetUsernameIfLoggedIn()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            ChatService.ChatForm.CurrentUser.EMail = user.Identity.Name;
        }
        ChatService.ChatForm.CurrentUser.IsGuest = !user.Identity.IsAuthenticated;
    }
}